Task 1. Create the configuration files

variables.tf

variable "region" {
 default = "us-central1"
}

variable "zone" {
 default = "us-central1-a"
}

variable "project_id" {
 default = "qwiklabs-gcp-03-95a084f7f066"
}

main.tf

terraform {
  required_providers {
    google = {
      source = "hashicorp/google"
      version = "4.53.0"
    }
  }
}

provider "google" {
  project     = var.project_id
  region      = var.region
  zone        = var.zone
}

module "instances" {
  source     = "./modules/instances"
}


terraform init 


Task 2. Import infrastructure

modules/instances/instances.tf

resource "google_compute_instance" "tf-instance-1" {
  name         = "tf-instance-1"
  machine_type = "n1-standard-1"
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

 network_interface {
 	network = "default"
 }
 allow_stopping_for_update = true
}

resource "google_compute_instance" "tf-instance-2" {
  name         = "tf-instance-2"
  machine_type = "n1-standard-1"
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

 network_interface {
 	network = "default"
 }
 allow_stopping_for_update = true
}


Task 3. Configure a remote backend

modules/storage/storage.tf

resource "google_storage_bucket" "storage-bucket" {
  name          = "tf-bucket-845040"
  location      = "US"
  force_destroy = true
  uniform_bucket_level_access = true
}

main.tf file:

module "storage" {
  source     = "./modules/storage"
}

terraform init
terraform apply

main.tf

terraform {
  backend "gcs" {
    bucket  = "tf-bucket-845040"
 prefix  = "terraform/state"
  }
  required_providers {
    google = {
      source = "hashicorp/google"
      version = "4.53.0"
    }
  }
}

terraform init


Task 4. Modify and update infrastructure


Task 5. Destroy resources


Task 6. Use a module from the Registry

instances.tf

resource "google_compute_instance" "tf-instance-1"{
  name         = "tf-instance-1"
  machine_type = "n1-standard-2"
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
    network = "tf-vpc-276239"
     subnetwork = "subnet-01"
  }
  metadata_startup_script = <<-EOT
        #!/bin/bash
    EOT
  allow_stopping_for_update = true
}

resource "google_compute_instance" "tf-instance-2"{
  name         = "tf-instance-2"
  machine_type = "n1-standard-2"
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
    network = "tf-vpc-276239"
     subnetwork = "subnet-02"
  }

  metadata_startup_script = <<-EOT
        #!/bin/bash
    EOT
  allow_stopping_for_update = true
}

module "vpc" {
    source  = "terraform-google-modules/network/google"
    version = "~> 6.0.0"

    project_id   = "qwiklabs-gcp-03-95a084f7f066"
    network_name = "tf-vpc-276239"
    routing_mode = "GLOBAL"

    subnets = [
        {
            subnet_name           = "subnet-01"
            subnet_ip             = "10.10.10.0/24"
            subnet_region         = "us-central1"
        },
        {
            subnet_name           = "subnet-02"
            subnet_ip             = "10.10.20.0/24"
            subnet_region         = "us-central1"
            subnet_private_access = "true"
            subnet_flow_logs      = "true"
            description           = "This subnet has a description"
        },
    ]
}

terraform init
terraform apply


Task 7. Configure a firewall

main.tf

resource "google_compute_firewall" "tf-firewall"{
  name    = "tf-firewall"
  network = "projects/qwiklabs-gcp-03-95a084f7f066/global/networks/tf-vpc-276239"

  allow {
    protocol = "tcp"
    ports    = ["80"]
  }

  source_tags = ["web"]
  source_ranges = ["0.0.0.0/0"]
}








